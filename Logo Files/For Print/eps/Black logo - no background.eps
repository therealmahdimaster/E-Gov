%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2476 1812
%%HiResBoundingBox: 0 0 2475.1199 1811.0399
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2475.1199 1811.0399 re
W
q
[0.24 0 0 -0.24 0 1811.0399] cm
q
0 0 10312.5 7543.75 re
W*
q
[64.882126 0 0 64.86911 1912.2084 -294.46686] cm
49.999001 11.764 m
32.848999 11.764 18.461 23.782 14.792 39.836998 c
17.458 39.536999 l
21.179001 25.038998 34.358002 14.291998 49.999001 14.291998 c
68.522003 14.291998 83.593002 29.361998 83.593002 47.886002 c
83.593002 52.549004 82.636002 56.992001 80.910004 61.032001 c
83.634003 61.032001 l
85.234001 56.955002 86.122002 52.522003 86.122002 47.886002 c
86.122002 27.967001 69.917 11.764 49.999001 11.764 c
f
13.897 47.076 m
13.891001 47.346001 13.876 47.613998 13.876 47.886002 c
13.876 58.365002 18.365 67.814003 25.52 74.419006 c
26.121 71.485008 l
20.348 65.646011 16.702999 57.708008 16.433001 48.933006 c
13.897 47.076 l
h
f
62.507 66.985001 m
58.681999 55.052002 l
70.943001 43.848 l
74.796997 40.325001 l
69.573997 40.304001 l
52.968998 40.241001 l
46.101002 25.120001 l
43.943001 20.365002 l
42.309002 25.325001 l
37.115002 41.099998 l
20.613001 42.958 l
15.425001 43.542 l
19.636002 46.625999 l
33.032001 56.439999 l
29.700001 72.709999 l
28.651001 77.824997 l
32.889 74.772995 l
46.362 65.062996 l
56.466 70.796997 l
43.666 78.878998 l
43.631001 78.905998 43.591999 78.939995 43.556 78.968994 c
42.785999 79.658997 42.723 80.842995 43.415001 81.61499 c
44.103001 82.384987 45.285999 82.44799 46.056999 81.756989 c
46.076 81.741989 l
58.714001 72.07399 l
60.805 73.261993 l
61.910999 73.890991 l
54.092999 78.968994 l
54.064999 78.992996 54.032997 79.017998 54.005997 79.043991 c
53.399998 79.604988 53.360996 80.554993 53.923996 81.160988 c
54.485996 81.76899 55.434998 81.805984 56.041996 81.243988 c
56.056995 81.229988 l
63.813995 74.966988 l
65.346992 75.83799 l
64.80999 74.162987 l
78.486992 63.119987 l
64.237991 72.377991 l
63.752991 70.86499 l
63.07299 68.741989 l
78.905991 56.632988 l
62.507 66.985001 l
h
46.230999 62.646 m
31.697001 73.119003 l
35.292 55.571003 l
20.84 44.983002 l
38.642998 42.980003 l
44.244999 25.963003 l
51.653 42.274002 l
69.566002 42.343002 l
56.34 54.431 l
61.812 71.489998 l
46.230999 62.646 l
h
f
63.917 44.523998 m
50.230999 44.470001 l
44.571999 32.007999 l
40.291 45.009998 l
26.691 46.540001 l
37.731998 54.627998 l
34.984001 68.036003 l
46.09 60.035 l
57.993999 66.790001 l
53.813999 53.757999 l
63.917 44.523998 l
h
f
Q
q
[72.34874 0 0 72.334221 337.10092 5602.3716] cm
10.96 5.84 m
10.96 7.64 l
3.74 7.64 l
3.74 11.860001 l
10.46 11.860001 l
10.46 13.660001 l
3.74 13.660001 l
3.74 18.200001 l
11.32 18.200001 l
11.32 20 l
1.82 20 l
1.82 5.84 l
10.96 5.84 l
h
17.84 14.32 m
17.84 16 l
12.92 16 l
12.92 14.32 l
17.84 14.32 l
h
26.879999 5.48 m
29.24 5.48 30.993399 6.0933 32.139999 7.32 c
30.779999 8.780001 l
29.726698 7.780001 28.419998 7.280001 26.859999 7.280001 c
25.299999 7.280001 24.019999 7.816661 23.019999 8.89 c
22.019999 9.96334 21.519999 11.306601 21.519999 12.92 c
21.519999 14.5467 22.049999 15.8934 23.109999 16.959999 c
24.169998 18.026598 25.473398 18.559999 27.019999 18.559999 c
28.486698 18.559999 29.646599 18.313339 30.499998 17.82 c
30.499998 13.879999 l
27.359999 13.879999 l
27.359999 12.079999 l
32.419998 12.079999 l
32.419998 19.059999 l
31.726658 19.473339 30.889997 19.793339 29.909998 20.02 c
28.929998 20.246662 27.979998 20.360001 27.059998 20.360001 c
24.833397 20.360001 23.013397 19.66666 21.599998 18.280001 c
20.1866 16.893341 19.48 15.106601 19.48 12.92 c
19.48 10.8134 20.176659 9.0466 21.57 7.62 c
22.963341 6.193399 24.7334 5.48 26.879999 5.48 c
26.879999 5.48 l
h
40.040001 10.28 m
41.440002 10.28 42.626602 10.76338 43.600002 11.73 c
44.573402 12.696619 45.066704 13.8734 45.080002 15.259999 c
45.080002 16.66 44.593342 17.833399 43.620003 18.779999 c
42.646664 19.726599 41.453403 20.213299 40.040001 20.239998 c
38.653301 20.239998 37.4734 19.759998 36.5 18.799997 c
35.5266 17.839996 35.026699 16.659998 35 15.259997 c
35 13.886698 35.483341 12.719997 36.450001 11.759997 c
37.41666 10.799997 38.6134 10.306698 40.040001 10.279997 c
40.040001 10.28 l
h
36.919998 15.26 m
36.919998 16.233341 37.206638 17.0233 37.77998 17.630001 c
38.353321 18.236702 39.106678 18.546661 40.039978 18.560001 c
40.986637 18.560001 41.739979 18.25666 42.299976 17.650002 c
42.859974 17.043343 43.146637 16.246702 43.159977 15.260001 c
43.159977 14.286661 42.879978 13.496701 42.319977 12.890001 c
41.759975 12.283301 40.993279 11.973341 40.019978 11.960001 c
39.073318 11.960001 38.319977 12.273341 37.759979 12.900002 c
37.199982 13.526662 36.919979 14.313301 36.919979 15.260002 c
36.919998 15.26 l
h
48.279999 10.520001 m
51.119999 17.780001 l
53.84 10.520001 l
55.760002 10.520001 l
52.040001 20 l
50.060001 20 l
46.200001 10.520001 l
48.279999 10.520001 l
h
61.68 10.28 m
63.133301 10.28 64.263397 10.73664 65.07 11.65 c
65.876602 12.563359 66.286697 13.82 66.300003 15.42 c
66.300003 15.92 l
58.700005 15.92 l
58.700005 16.69334 59.010006 17.3433 59.630005 17.870001 c
60.250004 18.396702 61.006706 18.66666 61.900005 18.68 c
62.886665 18.68 63.753304 18.206661 64.500008 17.26 c
65.860008 18.299999 l
64.84671 19.5933 63.446609 20.24 61.660007 20.24 c
60.206707 20.24 59.036606 19.776659 58.150009 18.85 c
57.263412 17.923342 56.806709 16.726601 56.78001 15.26 c
56.78001 13.846701 57.236671 12.67 58.150009 11.730001 c
59.063347 10.790001 60.240009 10.306701 61.680008 10.280001 c
61.68 10.28 l
h
64.379997 14.48 m
64.35334 13.586659 64.099998 12.903299 63.619999 12.429999 c
63.139999 11.956699 62.48 11.719999 61.639999 11.719999 c
61.079998 11.719999 60.576698 11.856659 60.130001 12.129999 c
59.683304 12.403339 59.33334 12.75668 59.080002 13.189999 c
58.826664 13.623318 58.700001 14.053339 58.700001 14.479999 c
64.379997 14.479999 l
64.379997 14.48 l
h
73.139999 10.28 m
73.473343 10.28 73.739998 10.32 73.940002 10.4 c
73.860001 12.34 l
73.513344 12.24666 73.213341 12.2 72.959999 12.2 c
71.186699 12.2 70.286598 13.18666 70.260002 15.16 c
70.260002 20 l
68.459999 20 l
68.459999 10.520001 l
70.260002 10.520001 l
70.260002 11.980001 l
70.300003 11.980001 l
70.540001 11.473341 70.926666 11.06334 71.460007 10.75 c
71.993347 10.43666 72.553307 10.28 73.140007 10.28 c
73.139999 10.28 l
h
80.82 10.28 m
81.886703 10.28 82.723297 10.599999 83.330002 11.24 c
83.936707 11.88 84.246658 12.74 84.260002 13.82 c
84.260002 20 l
82.459999 20 l
82.459999 14.34 l
82.459999 13.60666 82.269997 13.0267 81.889999 12.6 c
81.510002 12.173301 80.979996 11.96 80.300003 11.96 c
79.460007 11.96 78.810005 12.24 78.350006 12.8 c
77.890007 13.360001 77.660004 14.1067 77.660004 15.04 c
77.660004 20 l
75.860001 20 l
75.860001 10.520001 l
77.660004 10.520001 l
77.660004 11.980001 l
77.700005 11.980001 l
77.953346 11.446661 78.363342 11.030001 78.930008 10.730001 c
79.496674 10.43 80.126709 10.280001 80.820007 10.280001 c
80.82 10.28 l
h
91.739998 10.28 m
93.113297 10.28 94.099998 10.86666 94.699997 12.04 c
95.00666 11.48 95.426659 11.04666 95.959999 10.74 c
96.49334 10.43334 97.073296 10.28 97.699997 10.28 c
100.086594 10.28 101.286598 11.653299 101.299995 14.4 c
101.299995 20 l
99.499992 20 l
99.499992 14.62 l
99.499992 13.68666 99.333336 13.01 98.999992 12.59 c
98.666649 12.17 98.153313 11.96 97.459991 11.96 c
96.646652 11.96 96.039993 12.20666 95.639992 12.7 c
95.23999 13.193339 95.039993 13.8733 95.039993 14.74 c
95.039993 20 l
93.23999 20 l
93.23999 14.9 l
93.23999 13.78 93.079987 13.009999 92.759987 12.59 c
92.439987 12.170001 91.933327 11.96 91.23999 11.96 c
90.493332 11.96 89.89669 12.24666 89.449989 12.82 c
89.003288 13.393339 88.779991 14.12 88.779991 15 c
88.779991 20 l
86.979988 20 l
86.979988 10.520001 l
88.659988 10.520001 l
88.659988 12 l
88.699989 12 l
88.899986 11.533341 89.296646 11.13 89.889992 10.79 c
90.483337 10.45 91.099991 10.28 91.73999 10.28 c
91.739998 10.28 l
h
108.360001 10.28 m
109.813301 10.28 110.943398 10.73664 111.75 11.65 c
112.556602 12.563359 112.966698 13.82 112.980003 15.42 c
112.980003 15.92 l
105.380005 15.92 l
105.380005 16.69334 105.690002 17.3433 106.310005 17.870001 c
106.930008 18.396702 107.686707 18.66666 108.580002 18.68 c
109.566666 18.68 110.433304 18.206661 111.18 17.26 c
112.540001 18.299999 l
111.526703 19.5933 110.126602 20.24 108.340004 20.24 c
106.886703 20.24 105.716606 19.776659 104.830002 18.85 c
103.943398 17.923342 103.486702 16.726601 103.459999 15.26 c
103.459999 13.846701 103.916656 12.67 104.830002 11.730001 c
105.743347 10.790001 106.919998 10.306701 108.360001 10.280001 c
108.360001 10.28 l
h
111.059998 14.48 m
111.03334 13.586659 110.779999 12.903299 110.299995 12.429999 c
109.819992 11.956699 109.159996 11.719999 108.319992 11.719999 c
107.759995 11.719999 107.256691 11.856659 106.80999 12.129999 c
106.363289 12.403339 106.013329 12.75668 105.759987 13.189999 c
105.506645 13.623318 105.37999 14.053339 105.37999 14.479999 c
111.05999 14.479999 l
111.059998 14.48 l
h
120.099998 10.28 m
121.166702 10.28 122.003296 10.599999 122.610001 11.24 c
123.216705 11.88 123.526657 12.74 123.540001 13.82 c
123.540001 20 l
121.739998 20 l
121.739998 14.34 l
121.739998 13.60666 121.549995 13.0267 121.169998 12.6 c
120.790001 12.173301 120.259995 11.96 119.580002 11.96 c
118.740005 11.96 118.090004 12.24 117.630005 12.8 c
117.170006 13.360001 116.940002 14.1067 116.940002 15.04 c
116.940002 20 l
115.139999 20 l
115.139999 10.520001 l
116.940002 10.520001 l
116.940002 11.980001 l
116.980003 11.980001 l
117.233345 11.446661 117.643341 11.030001 118.210007 10.730001 c
118.776672 10.43 119.406708 10.280001 120.100006 10.280001 c
120.099998 10.28 l
h
128.759995 7.86 m
128.759979 10.520001 l
131.339981 10.520001 l
131.339981 12.08 l
128.759979 12.08 l
128.759979 16.639999 l
128.759979 17.25334 128.846634 17.7267 129.019974 18.059999 c
129.193314 18.393299 129.559967 18.559999 130.11998 18.559999 c
130.65332 18.559999 131.079987 18.46666 131.399979 18.279999 c
131.399979 19.919998 l
131.053314 20.106659 130.506653 20.213318 129.759979 20.239979 c
129.039978 20.239979 128.483276 20.129978 128.089981 19.909979 c
127.696686 19.68998 127.409981 19.38332 127.22998 18.989979 c
127.04998 18.596638 126.959984 17.979979 126.959984 17.139978 c
126.959984 12.079979 l
124.879982 12.079979 l
124.879982 10.51998 l
126.959984 10.51998 l
126.959984 7.85998 l
128.759979 7.85998 l
128.759995 7.86 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
